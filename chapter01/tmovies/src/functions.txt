Functions let you package a set of commands together under a single name.

:pause 3

A function also provides a way to customize its action according to passed arguments.

:pause 3

Let's make a totally simple function that doesn't do anything:

    >>> def f(): pass

:pause 4

.. and run it:

    >>> f()

:pause 4

The interpreter does not show the return value if it is 'None', but we can check with the repr()
function:

    >>> repr(f())
    'None'

(functions ALWAYS return something -- if no value is specified, None is returned)

:pause 4

A function can, of course, do something:

    >>> def f(): print("hello")
    >>> f()
    hello

:pause 4

.. or it can return some value:

    >>> def f(): return "hello"
    >>> f()
    'hello'

:pause 4

It can also accept an argument. Usually it will do something with it, but in this example it
doesn't:

    >>> def f(x): pass
    >>> f(5)
    >>> f("do something!")

:pause 4

Let's make it return the argument multiplied:

    >>> def f(x): return x * 5
    >>> f(5)
    25
    >>> f("do something! ")
    'do something! do something! do something! do something! do something! '

:pause 7

Amazingly, function can even accept two arguments:

    >>> def f(x, y): return x * y + x + y

:pause 4

    >>> f(2, 5)
    17

:pause 4

    >>> def f(x, y=1, z=2): return x * y + z

:pause 4

    >>> f(1)
    3

:pause 4

    >>> f(2)
    4

:pause 4

    >>> f(1, 3)
    5

:pause 4

    >>> f()
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: f() takes at least 1 argument (0 given)

:pause 4

    >>> f(1, 3, 5)
    8

:pause 4

    >>> def f(*args): return sum(args)

:pause 4

    >>> f(1, 3, 8)
    12

:pause 4

    >>> def f(x, y, z): return x + y + z

:pause 4

    >>> lst = [1,3,8]

:pause 4

    >>> f(lst)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: f() takes exactly 3 arguments (1 given)

:pause 4

    >>> f(*lst)
    12

:pause 4

    >>> def f(x=1, y=2, z=3): return x * y + z

:pause 4

    >>> d = dict(x=2, y=3)

:pause 4

    >>> f(**d)
    9

:pause 4

    >>> d = dict()

:pause 4

    >>> f(**d)
    5

:pause 4

    >>> f()
    5

:pause 4

    >>> def f(**kwargs):
    ...  if 'x' in kwargs:
    ...   print("got an 'x' arg!")

:pause 4

    >>> f()

:pause 4

    >>> f(y=1)

:pause 4

    >>> f(x=1)
    got an 'x' arg!

:pause 4

    >>> def f(*args, **kwargs):
    ...  print(args)
    ...  print(kwargs)

:pause 4

    >>> f(3, 4, x=5, y=7)
    (3, 4)
    {'y': 7, 'x': 5}

:pause 4

    >>> lst = [3, 4]

:pause 4

    >>> d = dict(x=5, y=7)

:pause 4

    >>> f(*lst, **d)
    (3, 4)
    {'y': 7, 'x': 5}
