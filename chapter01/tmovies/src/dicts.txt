A dictionary is an unordered collection of key : value pairs where keys are unique and values can
be looked up by the key.

:pause 2

You can use Python dictionaries to store data like: a regular dictionary with word : definition pairs,
user data stored as user id: user object pairs, et cetera.

:pause 4


I'll use collections.Counter to create a dict of letters and their counts for use in my examples:

    >>> from collections import Counter
    >>> s = "nature and nurture"
    >>> d = dict(Counter(s))
    >>> d
    {'a': 2, ' ': 2, 'e': 2, 'd': 1, 'n': 3, 'r': 3, 'u': 3, 't': 2}

:pause 4

You can use keys() and values() methods to get respective lists (to be exact, they are iterators
that can be looped over directly or converted to a real list using the list() function).

    >>> d.keys()
    dict_keys(['a', ' ', 'e', 'd', 'n', 'r', 'u', 't'])

    >>> d.values()
    dict_values([2, 2, 2, 1, 3, 3, 3, 2])

:pause 4

You can also get a list of key / value tuples:

    >>> d.items()
    dict_items([('a', 2), (' ', 2), ('e', 2), ('d', 1), ('n', 3), ('r', 3), ('u', 3), ('t', 2)])

:pause 4

Here's how you can get a value:

    >>> d['a']
    2

:pause 4

.. and the other way to do the same:

    >>> d.get('a')
    2

:pause 4

There is a difference, however: get returns None if key is not found:

    >>> d.get('z')

:pause 4

(you can optionally provide a default):

    >>> d.get('z', "not found")
    'not found'

:pause 4

Popping an item works similarly to lists:

    >>> d.pop('a')
    2
    >>> d
    {' ': 2, 'e': 2, 'd': 1, 'n': 3, 'r': 3, 'u': 3, 't': 2}

:pause 4

Unlike get(), it key cannot be absent:

    >>> d.pop('z')
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    KeyError: 'z'

:pause 4

.. but you can provide the default arg:

    >>> d.pop('z', "not found")
    'not found'

:pause 4

You can pop an arbitrary item, as well, if you wish to gradually exhaust the dict.

    >>> d.popitem()
    (' ', 2)
    >>> d
    {'e': 2, 'd': 1, 'n': 3, 'r': 3, 'u': 3, 't': 2}

:pause 4

Let's update our dict with another dict:

    >>> d.update(dict(z=1))
    >>> d
    {'e': 2, 'd': 1, 'n': 3, 'r': 3, 'u': 3, 't': 2, 'z': 1}

:pause 4

As you guessed from the example above, you can create new dicts using a dict() call:

    >>> d = dict(a=1, b=2, c=3)

:pause 4

.. but it can only work with keys that have no spaces; the way to have those is to use curly
 brackets syntax:

    >>> d.update({"foo bar": 4})

:pause 4

    >>> d
    {'a': 1, 'foo bar': 4, 'c': 3, 'b': 2}

:pause 4

    >>> dict.fromkeys(range(10))
    {0: None, 1: None, 2: None, 3: None, 4: None, 5: None, 6: None, 7: None, 8: None, 9: None}

:pause 4

    >>> dict.fromkeys(range(10), 0)
    {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}

:pause 4

    >>> from collections import defaultdict

:pause 4

    >>> d = defaultdict(int)

:pause 4

    >>> d['a']
    0

:pause 4

    >>> d
    defaultdict(<class 'int'>, {'a': 0})

:pause 4

    >>> d['x'] += 1

:pause 4

    >>> d
    defaultdict(<class 'int'>, {'a': 0, 'x': 1})

:pause 4

    >>> d = defaultdict(lambda: 10)

:pause 4

    >>> d['x'] += 1

:pause 4

    >>> d
    defaultdict(<function <lambda> at 0x231b160>, {'x': 11})

