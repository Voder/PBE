A set is an unordered collection of unique values.

:pause 2

You can create a set from a list -- in fact, it's a convenient way to get rid of duplicates:

    >>> lst = [1,2,1,3,3,1,2]
    >>> s = set(lst)
    >>> s
    {1, 2, 3}

:pause 5

You can also create a set using a set() call (or figure brackets):

    >>> s2 = set(3, 4, 5); s2
    {3, 4, 5}

:pause 4

Intersection can be created using & operator or intersection() method:

    >>> s & s2
    {3}
    >>> s.intersection(s2)
    {3}

:pause 4

Likewise, union can be created using | operator or union() method:

    >>> s | s2
    {1, 2, 3, 4, 5}

    >>> s.union(s2)
    {1, 2, 3, 4, 5}

:pause 4

Use difference() method to find items that are in first but not in second set:

    >>> s.difference(s2)
    {1, 2}

:pause 4

Symmetric difference returns a set of items in one or the other (but not both) sets:

    >>> s.symmetric_difference(s2)
    {1, 2, 4, 5, 6}

(this can also be done using the ^ operator)

:pause 4

Unlike lists, you need to use add() method (instead of append()) to add items:

    >>> s2.add(6); s2
    {3, 4, 5, 6}

:pause 4

Merging with a second set can be done with update() method, similar to dicts:

    >>> s2.update(s); s2
    {1, 2, 3, 4, 5, 6}

:pause 4

Arbitrary item is popped with pop() method, again similar to dicts:

    >>> s2.pop()
    1
    >>> s2
    {2, 3, 4, 5, 6}

:pause 4

You can check if there's an overlap with isdisjoint() method:

    >>> s.isdisjoint(s2)
    False
    >>> {1}.isdisjoint({2})
    True
