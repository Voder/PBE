Control flow statements let you control the execution of statements in your program

:pause 3

'True' and 'False' are special Python objects. A common example of their use is to turn a setting
on or off by assigning True / False to a variable.

You can check if a value is True with an 'if' statement:

    >>> x = True
    >>> if x: print("x is true!")
    x is true!

Checking for False is just as easy:


    >>> y = False
    >>> if not y: print("y is false!")
    y is false!

The value does not necessarily need to be True or False, it can also be "Truthy" (or "Falsy"). For
example, an empty list is "Falsy" and a list with some items in it is "Truthy", which makes it
very convenient to use 'if' with a list object:

    >>> items = [1, 2]
    >>> if items:
            print("items is 'true' (there ARE some items)")
    items is 'true' (there ARE some items)

It would also be handy if empty text was "Falsy" while text with some characters in it would be
"Truthy". And so it is:

    >>> x = "foo"
    >>> text = "foo"
    >>> if text:
            print("text is 'true' (text is NOT empty)")
    text is 'true' (text is not empty)

Naturally, the same rules hold for numbers that are 0 and non-0:

    >>> num_items = 3
    >>> if num_items:
            print("num_items is 'true' (number of items is not 0)")
    num_items is 'true' (number of items is NOT 0)

(You might be wondering if negative numbers are Falsy -- they are not. The only Falsy number is 0,
in both integer and floating point form.)

Use 'for' to iterate over a list:

    >>> lst = [5,8,25]
    >>> for x in lst: print(x)
    5
    8
    25

In the same way, you can iterate over a tuple or any other sequence. There is a helper function,
enumerate(), used to add index numbers when iterating over a sequence:

    >>> atup = (20, "hi", 0)
    >>> for n, x in enumerate(atup): print(n, x)
    0 20
    1 hi
    2 0

I've already shown the 'if' statement; it can be supplemented with 'elif' and 'else' to handle
more cases:

    >>> for x in range(5):
         if x == 0:
            print("x is 0")
         elif x == 1:
             print("x is 1!")
         else:
             print("I don't know what's going on")
    x is 0
    x is 1!
    I don't know what's going on
    I don't know what's going on
    I don't know what's going on

    >>> x = 0
    >>> while x < 5:
         print('.')
         x += 1
    .
    .
    .
    .
    .
    >>> x = 0
    >>> while True:
         print('~', end='')
         x += 1
         if x > 5: break
    ~~~~~~>>>

